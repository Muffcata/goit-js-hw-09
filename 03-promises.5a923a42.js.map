{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAWC,SAASC,cAAc,QAClCC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAASJ,SAASC,cAAc,wBAElCI,EAAaH,EAAWI,cACxBC,EAAYJ,EAAUG,cACtBE,EAAW,EA6CfT,EAASU,iBAAiB,UA3CE,SAAAC,G,kBAG1B,IAAuBC,EAAUC,GAAVD,EAsBrBH,EAAWK,EAtBoBD,EAuBPP,EAtBjB,IAAIS,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EACEM,EAAAxB,GAASyB,OAAOC,QACd,uBAAwCC,OAAfb,EAAS,QAAiBa,OAAXZ,EAAW,QAIvDI,EACEK,EAAAxB,GAASyB,OAAOG,QACd,sBAAuCD,OAAfb,EAAS,QAAiBa,OAAXZ,EAAW,O,GAIvDA,E,KAOFc,MAAK,SAAAC,GACJN,EAAAxB,GAASyB,OAAOC,QACd,uBAA4CC,OAAnBhB,EAAW,EAAE,QAAiBgB,OAAXnB,EAAW,M,IAG1DuB,OAAM,SAAAC,GACLR,EAAAxB,GAASyB,OAAOG,QACd,sBAAyCD,OAAnBhB,EAAW,EAAE,QAAiBgB,OAAXnB,EAAW,M,IAI1DA,GAA0BE,EAC1BC,G,EAtCFE,EAAMoB,iBAuBN,IAAK,IAAIC,EAAI,EAAGA,GAAK3B,EAAOuB,MAAOI,IAAGC,EAAAD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst feedback = document.querySelector('form');\nconst firstDelay = document.querySelector('input[name=\"delay\"]');\nconst delayStep = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\n\nlet delayValue = firstDelay.valueAsNumber;\nlet stepValue = delayStep.valueAsNumber;\nlet position = 0;\n\nconst fetchUserFromServer = event => {\n  event.preventDefault();\n\n  function createPromise(position, delayValue) {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve(\n            Notiflix.Notify.success(\n              `✅ Fulfilled promise ${position} in ${delayValue}ms`\n            )\n          );\n        } else {\n          reject(\n            Notiflix.Notify.failure(\n              `❌ Rejected promise ${position} in ${delayValue}ms`\n            )\n          );\n        }\n      }, delayValue);\n    });\n  }\n\n  for (let i = 1; i <= amount.value; i++) {\n    position = i;\n    createPromise(position, delayValue)\n      .then(value => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position - 1} in ${delayValue}ms`\n        );\n      })\n      .catch(error => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position - 1} in ${delayValue}ms`\n        );\n      });\n\n    delayValue = delayValue + stepValue;\n    position++;\n  }\n};\n\nfeedback.addEventListener('submit', fetchUserFromServer);\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$feedback","document","querySelector","$ce04d3a99e08e73b$var$firstDelay","$ce04d3a99e08e73b$var$delayStep","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$delayValue","valueAsNumber","$ce04d3a99e08e73b$var$stepValue","$ce04d3a99e08e73b$var$position","addEventListener","event","position1","delayValue1","i","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$parcel$interopDefault","Notify","success","concat","failure","then","value","catch","error","preventDefault","i1","_loop"],"version":3,"file":"03-promises.5a923a42.js.map"}